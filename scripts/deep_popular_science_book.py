#!/usr/bin/env python3
"""
Stub for deep popular science book generator.
Currently creates a minimal scaffold (outline + 1 section) and saves to output/deep_popular_science_book/.
Will be expanded to multi-agent pipeline later.
"""
import os
import sys
from datetime import datetime
from pathlib import Path
import argparse

# Ensure project root is on sys.path before importing project modules
_project_root = Path(__file__).resolve().parents[1]
if str(_project_root) not in sys.path:
    sys.path.insert(0, str(_project_root))
from utils.env import ensure_project_root_on_syspath as ensure_root, load_env_from_root
from utils.slug import safe_slug
from utils.io import ensure_output_dir, save_markdown
from orchestrator import progress


def load_env() -> None:
    load_env_from_root(__file__)


def ensure_project_root_on_syspath() -> None:
    ensure_root(__file__)


def try_import_sdk():
    try:
        from agents import Agent, Runner  # type: ignore
        return Agent, Runner
    except ImportError as e:
        print("‚ùå ImportError: cannot import Agent/Runner from 'agents'.")
        print("‚û°Ô∏è Likely cause: a local folder named 'agents' shadows the SDK module.")
        print("‚û°Ô∏è Fix: rename local folder to 'llm_agents' (already recommended).")
        print(f"Details: {e}")
        raise


def safe_slug(text: str) -> str:
    forbidden = '<>:"/\\|?*\n\r\t'
    cleaned = ''.join('_' if ch in forbidden else ch for ch in text)
    cleaned = cleaned.replace(' ', '_')
    return cleaned.lower()


def main() -> None:
    parser = argparse.ArgumentParser(description="Generate a deep popular science book (stub)")
    parser.add_argument("--topic", type=str, default="", help="Topic to generate about")
    parser.add_argument("--lang", type=str, default="auto", help="Language: auto|ru|en")
    parser.add_argument("--out", type=str, default="deep_popular_science_book", help="Output subdirectory")
    args = parser.parse_args()
    ensure_project_root_on_syspath()
    load_env()

    try:
        Agent, Runner = try_import_sdk()
    except ImportError:
        return

    progress("start: book_stub")
    print("üìù Deep popular science book (stub)")
    print("=" * 50)

    if not os.getenv("OPENAI_API_KEY"):
        print("‚ùå OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞")
        return

    topic = args.topic.strip()
    if not topic:
        print("\nü§î –í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É:")
        topic = input("‚û§ ").strip()
    if not topic:
        print("‚ùå –¢–µ–º–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π")
        return

    print(f"\nüîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∑–∞–≥–æ—Ç–æ–≤–∫—É –∫–Ω–∏–≥–∏ –Ω–∞ —Ç–µ–º—É: '{topic}'")
    progress("agent:outline:init")
    print("‚è≥ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 1-2 –º–∏–Ω—É—Ç—ã...")

    try:
        # Optional language control
        lang_prefix = "" if args.lang == "auto" else f"–Ø–∑—ã–∫ –≤—ã–≤–æ–¥–∞: {args.lang}.\n"

        outline_agent = Agent(
            name="Book Outline Planner",
            instructions=(
                lang_prefix +
                "–°–æ—Å—Ç–∞–≤—å –æ–≥–ª–∞–≤–ª–µ–Ω–∏–µ –≥–ª—É–±–æ–∫–æ–π –Ω–∞—É—á–Ω–æ-–ø–æ–ø—É–ª—è—Ä–Ω–æ–π –∫–Ω–∏–≥–∏ –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–π —Ç–µ–º–µ.\n"
                "–°—Ç—Ä—É–∫—Ç—É—Ä–∞: 5-8 –≥–ª–∞–≤, –≤ –∫–∞–∂–¥–æ–π 3-5 —Ä–∞–∑–¥–µ–ª–æ–≤.\n"
                "–Ø–∑—ã–∫: —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —è–∑—ã–∫–æ–º –≤—Ö–æ–¥–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞."
            ),
            model="gpt-4o",
        )

        section_agent = Agent(
            name="Book Section Writer",
            instructions=(
                lang_prefix +
                "–ù–∞–ø–∏—à–∏ —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω—ã–π —Ä–∞–∑–¥–µ–ª –∫–Ω–∏–≥–∏ –≤ –Ω–∞—É—á–Ω–æ-–ø–æ–ø—É–ª—è—Ä–Ω–æ–º —Å—Ç–∏–ª–µ.\n"
                "–ü–æ—è—Å–Ω—è–π —Ç–µ—Ä–º–∏–Ω—ã, –ø–µ—Ä–µ—Ö–æ–¥–∏ –æ—Ç –ø—Ä–æ—Å—Ç–æ–≥–æ –∫ —Å–ª–æ–∂–Ω–æ–º—É, –∏–∑–±–µ–≥–∞–π —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫."
            ),
            model="gpt-4o",
        )

        progress("agent:outline:run")
        outline_result = Runner.run_sync(outline_agent, f"–¢–µ–º–∞: {topic}")
        outline_text = getattr(outline_result, "final_output", "")

        progress("agent:section:run")
        section_result = Runner.run_sync(section_agent, f"–ù–∞–ø–∏—à–∏ –ø–µ—Ä–≤—ã–π —Ä–∞–∑–¥–µ–ª –∫–Ω–∏–≥–∏ –ø–æ —Ç–µ–º–µ: {topic}")
        section_text = getattr(section_result, "final_output", "")

        if not outline_text or not section_text:
            print("‚ùå –ü—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç –æ–¥–Ω–æ–≥–æ –∏–∑ –∞–≥–µ–Ω—Ç–æ–≤")
            return

        progress("io:prepare_output")
        output_dir = ensure_output_dir(args.out)

        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"book_{safe_slug(topic)}_{timestamp}.md"
        filepath = output_dir / filename

        with open(filepath, "w", encoding="utf-8") as f:
            f.write(f"# {topic}\n\n")
            f.write(f"*–°–æ–∑–¥–∞–Ω–æ: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}*\n")
            f.write("*–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä: OpenAI Agents SDK*\n")
            f.write("*–ü–∞–π–ø–ª–∞–π–Ω: DeepPopularScienceBook (stub)*\n\n")
            f.write("## –û–≥–ª–∞–≤–ª–µ–Ω–∏–µ (—á–µ—Ä–Ω–æ–≤–∏–∫)\n\n")
            f.write(outline_text + "\n\n")
            f.write("## –ü—Ä–∏–º–µ—Ä —Ä–∞–∑–¥–µ–ª–∞\n\n")
            f.write(section_text + "\n")

        progress("done")
        print(f"‚úÖ –ì–æ—Ç–æ–≤–æ. –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {filepath}")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")


if __name__ == "__main__":
    main()


